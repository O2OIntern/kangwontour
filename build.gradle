buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
        classpath("org.hidetake:gradle-ssh-plugin:2.2.0")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'org.hidetake.ssh'

bootJar {
    baseName = 'kangwontour'
    version =  '0.1.0'
}

bootWar {
    baseName = 'kangwontour'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    //compile("org.springframework.boot:spring-boot-devtools")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.postgresql:postgresql:42.2.5")
    compile("com.google.zxing:core:3.3.3")
    compile("com.google.zxing:javase:3.3.3")
    compile("com.google.actions:actions-on-google:1.8.0") {
        exclude module : 'slf4j-log4j12'
    }
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    testCompile("junit:junit")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

remotes {
    webServer {
        host = '172.30.1.23'
        port = 22
        user = 'o2oadmin'
        identity = file('actions_service_key')
        knownHosts = allowAnyHosts
    }

    JarvisServer {
        host = '172.30.1.22'
        port = 22
        user = 'o2o'
        identity = file('jarvis_key')
        knownHosts = allowAnyHosts
    }
}

task('deployJarvis') { //release 적용은 Gradle의 Task/application/deployDev 으로 함
    dependsOn 'bootWar'
    group = 'application'

    doLast {
        String path = bootWar.destinationDirectory.getAsFile().get();
        String filename = bootWar.archiveFileName.get();
        ssh.run {
            session(remotes.JarvisServer) {
                put from: "${path}/${filename}", into: '/home/o2o/'
                execute ("sudo chown tomcat ${filename}")
                execute ("sudo mv ${filename} /opt/tomcat/latest/webapps/${filename}")
            }
        }
    }
}

task('deployDev') { //release 적용은 Gradle의 Task/application/deployDev 으로 함
    dependsOn 'bootWar'
    group = 'application'

    doLast {
        String path = bootWar.destinationDirectory.getAsFile().get();
        String filename = bootWar.archiveFileName.get();
        ssh.run {
            session(remotes.webServer) {
                put from: "${path}/${filename}", into: './'
                execute ("sudo chown tomcat ${filename}")
                execute ("sudo mv ${filename} /opt/dev/tomcat_d4/webapps/devsvr4.war")
            }
        }
    }
}

task('deployProd') {
	dependsOn 'bootWar'
	group = 'release'

    doLast {
        String path = bootWar.destinationDirectory.getAsFile().get()
        String filename = bootWar.archiveFileName.get()
        ssh.run {
            session(remotes.webServer) {
                put from: "${path}/${filename}", into: './'
                execute ("sudo chown tomcat ${filename}")
                execute ("sudo mv ${filename} /opt/dev/tomcat_d8/webapps/devsvr8.war")
            }
        }
    }
}
